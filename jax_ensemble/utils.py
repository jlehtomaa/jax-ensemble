import jax
import jax.numpy as jnp
import jax.random as jrn
import seaborn as sns
import matplotlib.pyplot as plt

def create_dataset(key, size):
    """Recreates the toy dataset from blundell2015weight.

    Parameters
    ----------
    key : jax.random.PRNGKey

    size : int
        Number of data points to sample.

    Returns
    -------
    features : float array-like, shape=(size, 1)
        Training data features.

    labels : float array-like, shape=(size, 1)
        Training data labels.

    Notes
    -----
    The one-dimensional dataset is generated by sampling inputs x in [0, 0.5],
    and generating labels with the following function:
    y = x + 0.3 sin(2 pi(x + eps)) + 0.3 sin(4 pi(x + eps)) + eps,
    where eps is sampled from N(0, 0.02).

    Source: Blundell et al. 2015. Weight Uncertainty in Neural Networks.
    Proceedings of the 32nd International Conference on Machine Learning.
    """

    key1, key2 = jax.random.split(key) # One key for features, one for noise.

    features = jrn.uniform(key1, shape=(size, 1), minval=0.0, maxval=0.5)

    mean, stddev = 0.0, 0.02
    noise = mean + stddev * jax.random.normal(key2, shape=features.shape)

    labels = features + 0.3 * jnp.sin(2 * jnp.pi * (features + noise))
    labels += 0.3 * jnp.sin(4 * jnp.pi * (features + noise)) + noise

    return features, labels

def draw_ensemble_batch(key, x_data, y_data, batch_size, num_models):
    """Draw an individual batch from full training set for each ensemble member.

    Parameters
    ----------
    key : jax.PRNGKey

    x_data : float array-like
        Features of the full training dataset.

    y_data : float array-like
        Labels of the full training dataset.

    batch_size : int
        The number of data points going to each ensemble member.

    num_models : int
        How many members does the ensemble network have.

    Returns
    -------
    batch : dict
        A {"inputs": inputs, "labels": labels} dictionary. The inputs object
        has a shape (num_models, batch_size, input_dim), and the labels
        object has a shape (num_models, batch_size, 1).
    """

    num_data = x_data.shape[0]
    num_draws = batch_size * num_models

    inds = jax.random.randint(key, minval=0, maxval=num_data, shape=(num_draws,))
    out_shape = (num_models, batch_size, -1)
    return dict(inputs=x_data[inds].reshape(*out_shape),
                labels=y_data[inds].reshape(*out_shape))


def set_fig_layout(cfg):
    """Set consistent plot layouts.

    Parameters
    ----------
    cfg : dict
        Matplotlib and seaborn style configurations.
    """

    sns.set_palette(cfg["palette"])
    sns.set_style(**cfg["seaborn"])
    plt.style.use(cfg["matplotlib"])
